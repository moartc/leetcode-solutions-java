package solutions.algorithms._0_999._338_Counting_Bits;

class Solution {

    /*
    1:
    0  -> 0000  -> 0
    1  -> 0001  -> 1
    2  -> 0010  -> 1
    3  -> 0011  -> 2
    2:
    4  -> 0100  -> 1
    5  -> 0101  -> 2
    6  -> 0110  -> 2
    7  -> 0111  -> 3
    3:
    8  -> 1000  -> 1
    9  -> 1001  -> 2
    10 -> 1010  -> 2
    11 -> 1011  -> 3
    4:
    12 -> 1100  -> 2
    13 -> 1101  -> 3
    14 -> 1110  -> 3
    15 -> 1111  -> 4
    5:
    16 -> 10000 -> 1
    17 -> 10001 -> 2
    18 -> 10010 -> 2
    19 -> 10011 -> 3
    6:
    20 -> 10100 -> 2
    21 -> 10101 -> 3
    22 -> 10110 -> 3
    23 -> 10111 -> 4
    7:
    24 -> 11000 -> 2
    25 -> 11001 -> 3
    26 -> 11010 -> 3
    27 -> 11011 -> 4
    8:
    28 -> 11100 -> 3
    29 -> 11101 -> 4
    30 -> 11110 -> 4
    31 -> 11111 -> 5
    9:
    32 -> 100000 -> 1
    33 -> 100001 -> 2
    34 -> 100010 -> 2
    35 -> 100011 -> 3
    10:
    36 -> 100100 -> 2
    37 -> 100101 -> 3
    38 -> 100110 -> 3
    39 -> 100111 -> 4
    11:
    40 -> 101000 -> 2
    41 -> 101001 -> 3
    42 -> 101010 -> 3
    43 -> 101011 -> 4
    12:
    44 -> 101100 -> 3
    45 -> 101101 -> 4
    46 -> 101110 -> 4
    47 -> 101111 -> 5
    13:
    48 -> 110000 -> 2
    49 -> 110001 -> 3
    50 -> 110010 -> 3
    51 -> 110011 -> 4
    14:
    52 -> 110100 -> 3
    53 -> 110101 -> 4
    54 -> 110110 -> 4
    55 -> 110111 -> 5
    15:
    56 -> 111000 -> 3
    57 -> 111001 -> 4
    58 -> 111010 -> 4
    59 -> 111011 -> 5

    there are group of 4
    not the fastest but at least O(n)
     */
    public int[] countBits(int n) {
        if (n == 0) {
            return new int[]{0};
        }
        int[] arr = new int[n + 1];
        arr[0] = 0;
        int powOf2 = 1;
        for (int i = 1; i <= n; i++) {
            if (powOf2 == i) {
                powOf2 = powOf2 << 1;
            }
            int weirdCalc = powOf2 - (powOf2 >> 1);
            arr[i] = arr[(i - weirdCalc)] + 1;
        }

        return arr;
    }
}